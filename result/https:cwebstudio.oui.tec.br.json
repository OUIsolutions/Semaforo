<!DOCTYPE html>
<html lang="en-US">
  <head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">

<!-- Begin Jekyll SEO tag v2.8.0 -->
<title>CWebSudio | CWebStudio</title>
<meta name="generator" content="Jekyll v3.9.3" />
<meta property="og:title" content="CWebSudio" />
<meta property="og:locale" content="en_US" />
<meta name="description" content="An Modern Reactive C Web Server" />
<meta property="og:description" content="An Modern Reactive C Web Server" />
<link rel="canonical" href="http://cwebstudio.oui.tec.br/" />
<meta property="og:url" content="http://cwebstudio.oui.tec.br/" />
<meta property="og:site_name" content="CWebStudio" />
<meta property="og:type" content="website" />
<meta name="twitter:card" content="summary" />
<meta property="twitter:title" content="CWebSudio" />
<script type="application/ld+json">
{"@context":"https://schema.org","@type":"WebSite","description":"An Modern Reactive C Web Server","headline":"CWebSudio","name":"CWebStudio","url":"http://cwebstudio.oui.tec.br/"}</script>
<!-- End Jekyll SEO tag -->

    <link rel="stylesheet" href="/assets/css/style.css?v=aedfd834567e2c8d57141aee3a29ab4dd95c1681">
    <!-- start custom head snippets, customize with your own _includes/head-custom.html file -->

<!-- Setup Google Analytics -->



<!-- You can set your favicon here -->
<!-- link rel="shortcut icon" type="image/x-icon" href="/favicon.ico" -->

<!-- end custom head snippets -->

  </head>
  <body>
    <div class="container-lg px-3 my-5 markdown-body">
      
      <h1><a href="http://cwebstudio.oui.tec.br/">CWebStudio</a></h1>
      

      <h1 id="cwebsudio">CWebSudio</h1>
<p>CWebSudio is a micro framework to deal with web aplications in C/C++. It’s a 
single header library that provides a lot of functionality such as reading headers,
query parameters, returning files, and text.</p>

<h1 id="installation">Installation</h1>

<h2 id="single-file">Single File</h2>
<p>CWebSudio is made to be as dumb as possible and adopt the idea of single file library.
For installation, simply copy the <strong>CWebStudio.h</strong> into your project and compile with gcc/g++ or clang.</p>

<p><a href="https://github.com/OUIsolutions/CWebStudio/releases/download/v1.0/CWebStudio.h">Download Link</a></p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include "CWebStudio.h"
</span><span class="n">CwebNamespace</span> <span class="n">cweb</span><span class="p">;</span>

<span class="n">CwebHttpResponse</span> <span class="o">*</span><span class="nf">main_sever</span><span class="p">(</span><span class="n">CwebHttpRequest</span> <span class="o">*</span><span class="n">request</span> <span class="p">){</span>

    <span class="k">return</span> <span class="n">cweb</span><span class="p">.</span><span class="n">response</span><span class="p">.</span><span class="n">send_text</span><span class="p">(</span><span class="s">"Hello World"</span><span class="p">,</span> <span class="mi">200</span><span class="p">);</span>

<span class="p">}</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[]){</span>
    <span class="n">cweb</span> <span class="o">=</span> <span class="n">newCwebNamespace</span><span class="p">();</span>
    <span class="k">struct</span> <span class="n">CwebServer</span> <span class="n">server</span> <span class="o">=</span> <span class="n">newCwebSever</span><span class="p">(</span><span class="mi">5000</span><span class="p">,</span> <span class="n">main_sever</span><span class="p">);</span>
    <span class="n">cweb</span><span class="p">.</span><span class="n">server</span><span class="p">.</span><span class="n">start</span><span class="p">(</span><span class="o">&amp;</span><span class="n">server</span><span class="p">);</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>The Source Code its available here:
<a href="https://github.com/OUIsolutions/CWebStudio">Source</a></p>
<h2 id="full-folder">Full Folder</h2>
<p>You can also download the entire <strong>CWebStudio</strong> folder to your project and run with the
<strong>#include “CWebStudio/CwebStudioMain.h”</strong> header:</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include "CWebStudio/CwebStudioMain.h"
</span><span class="n">CwebNamespace</span> <span class="n">cweb</span><span class="p">;</span>

<span class="n">CwebHttpResponse</span> <span class="o">*</span><span class="nf">main_sever</span><span class="p">(</span><span class="n">CwebHttpRequest</span> <span class="o">*</span><span class="n">request</span> <span class="p">){</span>


    <span class="k">return</span> <span class="n">cweb</span><span class="p">.</span><span class="n">response</span><span class="p">.</span><span class="n">send_text</span><span class="p">(</span><span class="s">"Hello World"</span><span class="p">,</span> <span class="mi">200</span><span class="p">);</span>

<span class="p">}</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[]){</span>
    <span class="n">cweb</span> <span class="o">=</span> <span class="n">newCwebNamespace</span><span class="p">();</span>
    <span class="k">struct</span> <span class="n">CwebServer</span> <span class="n">server</span> <span class="o">=</span> <span class="n">newCwebSever</span><span class="p">(</span><span class="mi">5000</span><span class="p">,</span> <span class="n">main_sever</span><span class="p">);</span>
    <span class="n">cweb</span><span class="p">.</span><span class="n">server</span><span class="p">.</span><span class="n">start</span><span class="p">(</span><span class="o">&amp;</span><span class="n">server</span><span class="p">);</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h1 id="getting-entries">Getting Entries</h1>

<h2 id="route-a-method">Route a Method</h2>

<p>Working with URL parameters is very easy, as seen in the following example:
<!--codeof:examples/route_and_method.c--></p>
<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="cp">#include "CWebStudio.h"
</span>
<span class="n">CwebNamespace</span> <span class="n">cweb</span><span class="p">;</span>

<span class="n">CwebHttpResponse</span> <span class="o">*</span><span class="nf">main_sever</span><span class="p">(</span><span class="n">CwebHttpRequest</span> <span class="o">*</span><span class="n">request</span> <span class="p">){</span>

    <span class="kt">char</span> <span class="o">*</span><span class="n">url</span> <span class="o">=</span> <span class="n">request</span><span class="o">-&gt;</span><span class="n">url</span><span class="p">;</span>
    <span class="kt">char</span> <span class="o">*</span><span class="n">method</span> <span class="o">=</span> <span class="n">request</span><span class="o">-&gt;</span><span class="n">method</span><span class="p">;</span>
    <span class="kt">char</span> <span class="o">*</span><span class="n">route</span> <span class="o">=</span> <span class="n">request</span><span class="o">-&gt;</span><span class="n">route</span><span class="p">;</span>

    <span class="n">printf</span><span class="p">(</span><span class="s">"URL: %s</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">url</span><span class="p">);</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">"Method: %s</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">method</span><span class="p">);</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">"Route: %s</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">route</span><span class="p">);</span>
    <span class="k">return</span> <span class="n">cweb</span><span class="p">.</span><span class="n">response</span><span class="p">.</span><span class="n">send_text</span><span class="p">(</span><span class="s">"Hello World"</span><span class="p">,</span> <span class="mi">200</span><span class="p">);</span>

<span class="p">}</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[]){</span>
    <span class="n">cweb</span> <span class="o">=</span> <span class="n">newCwebNamespace</span><span class="p">();</span>
    <span class="n">CwebServer</span> <span class="n">server</span> <span class="o">=</span> <span class="n">newCwebSever</span><span class="p">(</span><span class="mi">5000</span><span class="p">,</span> <span class="n">main_sever</span><span class="p">);</span>
    <span class="n">cweb</span><span class="p">.</span><span class="n">server</span><span class="p">.</span><span class="n">start</span><span class="p">(</span><span class="o">&amp;</span><span class="n">server</span><span class="p">);</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
<h2 id="iterating-query-parameters">Iterating Query Parameters</h2>

<p>To iterate through parameters, the object <strong>CwebDict</strong> may be used like this:
<!--codeof:examples/iterating_over_query_paramns.c--></p>
<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include "CWebStudio.h"
</span><span class="n">CwebNamespace</span> <span class="n">cweb</span><span class="p">;</span>

<span class="n">CwebHttpResponse</span> <span class="o">*</span><span class="nf">main_sever</span><span class="p">(</span><span class="n">CwebHttpRequest</span> <span class="o">*</span><span class="n">request</span> <span class="p">){</span>

    <span class="n">CwebDict</span> <span class="o">*</span><span class="n">query_paramns</span> <span class="o">=</span> <span class="n">request</span><span class="o">-&gt;</span><span class="n">params</span><span class="p">;</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">query_paramns</span><span class="o">-&gt;</span><span class="n">size</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">){</span>
        <span class="n">CwebKeyVal</span> <span class="o">*</span><span class="n">key_val</span> <span class="o">=</span> <span class="n">query_paramns</span><span class="o">-&gt;</span><span class="n">keys_vals</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
        <span class="kt">char</span> <span class="o">*</span><span class="n">key</span> <span class="o">=</span> <span class="n">key_val</span><span class="o">-&gt;</span><span class="n">key</span><span class="p">;</span>
        <span class="kt">char</span> <span class="o">*</span><span class="n">value</span> <span class="o">=</span> <span class="n">key_val</span><span class="o">-&gt;</span><span class="n">value</span><span class="p">;</span>
        <span class="n">printf</span><span class="p">(</span><span class="s">"%s : %s</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">key</span><span class="p">,</span> <span class="n">value</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">"------------------------------------------</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
    <span class="k">return</span> <span class="n">cweb</span><span class="p">.</span><span class="n">response</span><span class="p">.</span><span class="n">send_text</span><span class="p">(</span><span class="s">"Hello World"</span><span class="p">,</span> <span class="mi">200</span><span class="p">);</span>

<span class="p">}</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[]){</span>
    <span class="n">cweb</span> <span class="o">=</span> <span class="n">newCwebNamespace</span><span class="p">();</span>
    <span class="n">CwebServer</span> <span class="n">server</span> <span class="o">=</span> <span class="n">newCwebSever</span><span class="p">(</span><span class="mi">5000</span><span class="p">,</span> <span class="n">main_sever</span><span class="p">);</span>
    <span class="n">cweb</span><span class="p">.</span><span class="n">server</span><span class="p">.</span><span class="n">start</span><span class="p">(</span><span class="o">&amp;</span><span class="n">server</span><span class="p">);</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="urlencode-parameters">UrlEncode Parameters</h2>
<p>Cweb Studio also supports url parameter encoding. To do so, call the method 
<strong>request-&gt;read_content</strong> to parse the body: 
<!--codeof:examples/url_encoded_paramns.c--></p>
<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="cp">#include "CWebStudio.h"
</span><span class="n">CwebNamespace</span> <span class="n">cweb</span><span class="p">;</span>

<span class="n">CwebHttpResponse</span> <span class="o">*</span><span class="nf">main_sever</span><span class="p">(</span><span class="n">CwebHttpRequest</span> <span class="o">*</span><span class="n">request</span> <span class="p">){</span>
    <span class="n">cweb</span><span class="p">.</span><span class="n">request</span><span class="p">.</span><span class="n">read_content</span><span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="mi">20000</span><span class="p">);</span>
    <span class="n">CwebDict</span> <span class="o">*</span><span class="n">query_paramns</span> <span class="o">=</span> <span class="n">request</span><span class="o">-&gt;</span><span class="n">params</span><span class="p">;</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">query_paramns</span><span class="o">-&gt;</span><span class="n">size</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">){</span>
        <span class="n">CwebKeyVal</span> <span class="o">*</span><span class="n">key_val</span> <span class="o">=</span> <span class="n">query_paramns</span><span class="o">-&gt;</span><span class="n">keys_vals</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
        <span class="kt">char</span> <span class="o">*</span><span class="n">key</span> <span class="o">=</span> <span class="n">key_val</span><span class="o">-&gt;</span><span class="n">key</span><span class="p">;</span>
        <span class="kt">char</span> <span class="o">*</span><span class="n">value</span> <span class="o">=</span> <span class="n">key_val</span><span class="o">-&gt;</span><span class="n">value</span><span class="p">;</span>
        <span class="n">printf</span><span class="p">(</span><span class="s">"%s : %s</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">key</span><span class="p">,</span> <span class="n">value</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">"-----------------------------------------------</span><span class="se">\n</span><span class="s">"</span><span class="p">);;</span>
    <span class="k">return</span> <span class="n">cweb</span><span class="p">.</span><span class="n">response</span><span class="p">.</span><span class="n">send_text</span><span class="p">(</span><span class="s">"Url readed"</span><span class="p">,</span> <span class="mi">200</span><span class="p">);</span>

<span class="p">}</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[]){</span>
    <span class="n">cweb</span> <span class="o">=</span> <span class="n">newCwebNamespace</span><span class="p">();</span>
    <span class="n">CwebServer</span> <span class="n">server</span> <span class="o">=</span> <span class="n">newCwebSever</span><span class="p">(</span><span class="mi">5000</span><span class="p">,</span> <span class="n">main_sever</span><span class="p">);</span>
    <span class="n">cweb</span><span class="p">.</span><span class="n">server</span><span class="p">.</span><span class="n">start</span><span class="p">(</span><span class="o">&amp;</span><span class="n">server</span><span class="p">);</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="iterating-headers">Iterating Headers</h2>

<p>Similar to iterating through URL parameters, iterating through headers is equally as simple:
<!--codeof:examples/iterating_over_headers.c--></p>
<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code>

<span class="cp">#include "CWebStudio.h"
</span><span class="n">CwebNamespace</span> <span class="n">cweb</span><span class="p">;</span>

<span class="n">CwebHttpResponse</span> <span class="o">*</span><span class="nf">main_sever</span><span class="p">(</span> <span class="n">CwebHttpRequest</span> <span class="o">*</span><span class="n">request</span> <span class="p">){</span>

    <span class="n">CwebDict</span> <span class="o">*</span><span class="n">headers</span> <span class="o">=</span> <span class="n">request</span><span class="o">-&gt;</span><span class="n">headers</span><span class="p">;</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">headers</span><span class="o">-&gt;</span><span class="n">size</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">){</span>
        <span class="k">struct</span> <span class="n">CwebKeyVal</span> <span class="o">*</span><span class="n">key_val</span> <span class="o">=</span> <span class="n">headers</span><span class="o">-&gt;</span><span class="n">keys_vals</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
        <span class="kt">char</span> <span class="o">*</span><span class="n">key</span> <span class="o">=</span> <span class="n">key_val</span><span class="o">-&gt;</span><span class="n">key</span><span class="p">;</span>
        <span class="kt">char</span> <span class="o">*</span><span class="n">value</span> <span class="o">=</span> <span class="n">key_val</span><span class="o">-&gt;</span><span class="n">value</span><span class="p">;</span>
        <span class="n">printf</span><span class="p">(</span><span class="s">"%s : %s</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">key</span><span class="p">,</span> <span class="n">value</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">"-------------------------------</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
    <span class="k">return</span> <span class="n">cweb</span><span class="p">.</span><span class="n">response</span><span class="p">.</span><span class="n">send_text</span><span class="p">(</span><span class="s">"Headers Iterated"</span><span class="p">,</span> <span class="mi">200</span><span class="p">);</span>

<span class="p">}</span>


<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[]){</span>
    <span class="n">cweb</span> <span class="o">=</span> <span class="n">newCwebNamespace</span><span class="p">();</span>
    <span class="n">CwebServer</span> <span class="n">server</span> <span class="o">=</span> <span class="n">newCwebSever</span><span class="p">(</span><span class="mi">5000</span><span class="p">,</span> <span class="n">main_sever</span><span class="p">);</span>
    <span class="n">cweb</span><span class="p">.</span><span class="n">server</span><span class="p">.</span><span class="n">start</span><span class="p">(</span><span class="o">&amp;</span><span class="n">server</span><span class="p">);</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="reading-body-content">Reading Body Content</h2>
<p>Accessing the body content may be done by calling the function <strong>request-&gt;read_content</strong>.
The content will be accessible with <strong>request-&gt;content</strong> and <strong>request-&gt;content_length</strong>:
<!--codeof:examples/reading_body_content.c--></p>
<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include "CWebStudio.h"
</span>
<span class="n">CwebNamespace</span> <span class="n">cweb</span><span class="p">;</span>

<span class="n">CwebHttpResponse</span> <span class="o">*</span><span class="nf">main_sever</span><span class="p">(</span> <span class="n">CwebHttpRequest</span> <span class="o">*</span><span class="n">request</span> <span class="p">){</span>
    <span class="kt">int</span> <span class="n">one_mega_byte</span> <span class="o">=</span> <span class="mi">1048576</span><span class="p">;</span>

    <span class="kt">unsigned</span> <span class="kt">char</span> <span class="o">*</span><span class="n">body</span> <span class="o">=</span>  <span class="n">cweb</span><span class="p">.</span><span class="n">request</span><span class="p">.</span><span class="n">read_content</span><span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="n">one_mega_byte</span><span class="p">);</span>

    <span class="k">if</span><span class="p">(</span><span class="n">body</span><span class="p">){</span>
        <span class="n">printf</span><span class="p">(</span><span class="s">"body: %s"</span><span class="p">,(</span><span class="kt">char</span><span class="o">*</span><span class="p">)</span><span class="n">body</span><span class="p">);</span>
         <span class="k">return</span> <span class="n">cweb_send_text</span><span class="p">(</span><span class="s">"Body Readed"</span><span class="p">,</span> <span class="mi">200</span><span class="p">);</span>

    <span class="p">}</span>
    <span class="k">return</span> <span class="n">cweb_send_text</span><span class="p">(</span><span class="s">"Body Not Readed"</span><span class="p">,</span> <span class="mi">200</span><span class="p">);</span>


<span class="p">}</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[]){</span>
    <span class="n">cweb</span> <span class="o">=</span> <span class="n">newCwebNamespace</span><span class="p">();</span>
    <span class="n">CwebServer</span> <span class="n">server</span> <span class="o">=</span> <span class="n">newCwebSever</span><span class="p">(</span><span class="mi">5000</span><span class="p">,</span> <span class="n">main_sever</span><span class="p">);</span>
    <span class="n">cweb</span><span class="p">.</span><span class="n">server</span><span class="p">.</span><span class="n">start</span><span class="p">(</span><span class="o">&amp;</span><span class="n">server</span><span class="p">);</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
<h2 id="parsing-json">Parsing JSON</h2>
<p>CwebStudio has cJSON integrated into the library. For more information, see 
https://github.com/DaveGamble/cJSON.
<!--codeof:examples/parsing_body_json.c--></p>
<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include "CWebStudio.h"
</span><span class="n">CwebNamespace</span> <span class="n">cweb</span><span class="p">;</span>
<span class="n">CwebHttpResponse</span> <span class="o">*</span><span class="nf">main_sever</span><span class="p">(</span> <span class="n">CwebHttpRequest</span> <span class="o">*</span><span class="n">request</span> <span class="p">){</span>

    <span class="kt">int</span> <span class="n">one_mega_byte</span> <span class="o">=</span> <span class="mi">1048576</span><span class="p">;</span>
    <span class="n">cJSON</span> <span class="o">*</span><span class="n">json</span>  <span class="o">=</span> <span class="n">cweb</span><span class="p">.</span><span class="n">request</span><span class="p">.</span><span class="n">read_cJSON</span><span class="p">(</span><span class="n">request</span><span class="p">,</span><span class="n">one_mega_byte</span><span class="p">);</span>
    <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">json</span><span class="p">){</span>
        <span class="k">return</span> <span class="n">cweb</span><span class="p">.</span><span class="n">response</span><span class="p">.</span><span class="n">send_text</span><span class="p">(</span><span class="s">"not passed or not valid json"</span><span class="p">,</span><span class="mi">404</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="n">cJSON</span> <span class="o">*</span><span class="n">name</span> <span class="o">=</span> <span class="n">cJSON_GetObjectItemCaseSensitive</span><span class="p">(</span><span class="n">json</span><span class="p">,</span> <span class="s">"name"</span><span class="p">);</span>
    <span class="n">cJSON</span> <span class="o">*</span><span class="n">age</span> <span class="o">=</span> <span class="n">cJSON_GetObjectItemCaseSensitive</span><span class="p">(</span><span class="n">json</span><span class="p">,</span> <span class="s">"age"</span><span class="p">);</span>

    <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">name</span><span class="p">){</span>
        <span class="k">return</span> <span class="n">cweb</span><span class="p">.</span><span class="n">response</span><span class="p">.</span><span class="n">send_text</span><span class="p">(</span><span class="s">"name not provided"</span><span class="p">,</span><span class="mi">404</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">if</span><span class="p">(</span><span class="n">name</span><span class="o">-&gt;</span><span class="n">type</span> <span class="o">!=</span> <span class="n">cJSON_String</span><span class="p">){</span>
        <span class="k">return</span> <span class="n">cweb</span><span class="p">.</span><span class="n">response</span><span class="p">.</span><span class="n">send_text</span><span class="p">(</span><span class="s">"name its not a string"</span><span class="p">,</span><span class="mi">404</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">age</span><span class="p">){</span>
        <span class="k">return</span> <span class="n">cweb</span><span class="p">.</span><span class="n">response</span><span class="p">.</span><span class="n">send_text</span><span class="p">(</span><span class="s">"age not provided"</span><span class="p">,</span><span class="mi">404</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">if</span><span class="p">(</span><span class="n">age</span><span class="o">-&gt;</span><span class="n">type</span> <span class="o">!=</span> <span class="n">cJSON_Number</span><span class="p">){</span>
        <span class="k">return</span> <span class="n">cweb</span><span class="p">.</span><span class="n">response</span><span class="p">.</span><span class="n">send_text</span><span class="p">(</span><span class="s">"age its not a number"</span><span class="p">,</span><span class="mi">404</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="n">printf</span><span class="p">(</span><span class="s">"Name: %s</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">name</span><span class="o">-&gt;</span><span class="n">valuestring</span><span class="p">);</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">"Age: %d</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">age</span><span class="o">-&gt;</span><span class="n">valueint</span><span class="p">);</span>


    <span class="k">return</span> <span class="n">cweb_send_text</span><span class="p">(</span><span class="s">"json parserd"</span><span class="p">,</span> <span class="mi">200</span><span class="p">);</span>

<span class="p">}</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[]){</span>
    <span class="n">cweb</span> <span class="o">=</span> <span class="n">newCwebNamespace</span><span class="p">();</span>
    <span class="n">CwebServer</span> <span class="n">server</span> <span class="o">=</span> <span class="n">newCwebSever</span><span class="p">(</span><span class="mi">5000</span><span class="p">,</span> <span class="n">main_sever</span><span class="p">);</span>
    <span class="n">cweb</span><span class="p">.</span><span class="n">server</span><span class="p">.</span><span class="n">start</span><span class="p">(</span><span class="o">&amp;</span><span class="n">server</span><span class="p">);</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
<h2 id="returning-json-from-cjson">Returning Json from cJSON</h2>
<p>if you want to return values from cJSON, you can call the <strong>cweb.response.send_cJSON_cleaning_memory</strong> or 
<strong>cweb.response.send_cJSON</strong> to return cjson values 
<!--codeof:examples/returning_cjson.c--></p>
<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include "CWebStudio.h"
</span>
<span class="n">CwebNamespace</span> <span class="n">cweb</span><span class="p">;</span>

<span class="n">CwebHttpResponse</span> <span class="o">*</span><span class="nf">main_sever</span><span class="p">(</span><span class="n">CwebHttpRequest</span> <span class="o">*</span><span class="n">request</span> <span class="p">){</span>


    <span class="n">cJSON</span> <span class="o">*</span> <span class="n">custom</span> <span class="o">=</span> <span class="n">cJSON_CreateObject</span><span class="p">();</span>
    <span class="n">cJSON_AddStringToObject</span><span class="p">(</span><span class="n">custom</span><span class="p">,</span><span class="s">"a"</span><span class="p">,</span><span class="s">"value of a"</span><span class="p">);</span>
    <span class="n">cJSON_AddStringToObject</span><span class="p">(</span><span class="n">custom</span><span class="p">,</span><span class="s">"b"</span><span class="p">,</span><span class="s">"value of b"</span><span class="p">);</span>
    <span class="n">CwebHttpResponse</span> <span class="o">*</span><span class="n">response</span> <span class="o">=</span> <span class="n">cweb</span><span class="p">.</span><span class="n">response</span><span class="p">.</span><span class="n">send_cJSON_cleaning_memory</span><span class="p">(</span><span class="n">custom</span><span class="p">,</span><span class="mi">200</span><span class="p">);</span>
    <span class="k">return</span> <span class="n">response</span><span class="p">;</span>
<span class="p">}</span>


<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[]){</span>
    <span class="n">cweb</span> <span class="o">=</span> <span class="n">newCwebNamespace</span><span class="p">();</span>
    <span class="n">CwebServer</span> <span class="n">server</span> <span class="o">=</span> <span class="n">newCwebSever</span><span class="p">(</span><span class="mi">5000</span><span class="p">,</span> <span class="n">main_sever</span><span class="p">);</span>
    <span class="n">cweb</span><span class="p">.</span><span class="n">server</span><span class="p">.</span><span class="n">start</span><span class="p">(</span><span class="o">&amp;</span><span class="n">server</span><span class="p">);</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
<!--codeof:examples/sending_json.c-->
<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="cp">#include "CWebStudio.h"
</span>
<span class="n">CwebNamespace</span> <span class="n">cweb</span><span class="p">;</span>

<span class="n">CwebHttpResponse</span> <span class="o">*</span><span class="nf">main_sever</span><span class="p">(</span><span class="n">CwebHttpRequest</span> <span class="o">*</span><span class="n">request</span> <span class="p">){</span>

    <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">json</span> <span class="o">=</span> <span class="s">"{</span><span class="se">\"</span><span class="s">name</span><span class="se">\"</span><span class="s">:</span><span class="se">\"</span><span class="s">CWebStudio</span><span class="se">\"</span><span class="s">,</span><span class="se">\"</span><span class="s">version</span><span class="se">\"</span><span class="s">:</span><span class="se">\"</span><span class="s">1.0.0</span><span class="se">\"</span><span class="s">}"</span><span class="p">;</span>
    <span class="k">return</span> <span class="n">cweb</span><span class="p">.</span><span class="n">response</span><span class="p">.</span><span class="n">send_json_string</span><span class="p">(</span><span class="n">json</span><span class="p">,</span><span class="mi">200</span><span class="p">);</span>

<span class="p">}</span>



<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[]){</span>
    <span class="n">cweb</span> <span class="o">=</span> <span class="n">newCwebNamespace</span><span class="p">();</span>
    <span class="n">CwebServer</span> <span class="n">server</span> <span class="o">=</span> <span class="n">newCwebSever</span><span class="p">(</span><span class="mi">5000</span><span class="p">,</span> <span class="n">main_sever</span><span class="p">);</span>
    <span class="n">cweb</span><span class="p">.</span><span class="n">server</span><span class="p">.</span><span class="n">start</span><span class="p">(</span><span class="o">&amp;</span><span class="n">server</span><span class="p">);</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="reading-binary-content">Reading Binary Content</h2>
<!--codeof:examples/reading_binary_content.c-->
<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include "CWebStudio.h"
</span>
<span class="n">CwebNamespace</span> <span class="n">cweb</span><span class="p">;</span>


<span class="kt">void</span> <span class="nf">write_binary_file</span><span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="n">path</span><span class="p">,</span> <span class="kt">unsigned</span> <span class="kt">char</span> <span class="o">*</span><span class="n">content</span><span class="p">,</span> <span class="kt">int</span> <span class="n">size</span><span class="p">)</span>
<span class="p">{</span>
    <span class="kt">FILE</span> <span class="o">*</span><span class="n">file</span> <span class="o">=</span> <span class="n">fopen</span><span class="p">(</span><span class="n">path</span><span class="p">,</span> <span class="s">"wb"</span><span class="p">);</span>
    <span class="n">fwrite</span><span class="p">(</span><span class="n">content</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">unsigned</span> <span class="kt">char</span><span class="p">),</span> <span class="n">size</span><span class="p">,</span> <span class="n">file</span><span class="p">);</span>
    <span class="n">fclose</span><span class="p">(</span><span class="n">file</span><span class="p">);</span>
<span class="p">}</span>


<span class="k">struct</span> <span class="n">CwebHttpResponse</span> <span class="o">*</span><span class="nf">main_sever</span><span class="p">(</span><span class="k">struct</span> <span class="n">CwebHttpRequest</span> <span class="o">*</span><span class="n">request</span> <span class="p">){</span>

    <span class="kt">int</span> <span class="n">two_mega_bytes</span> <span class="o">=</span> <span class="mi">2097152</span><span class="p">;</span>
    <span class="kt">char</span> <span class="o">*</span><span class="n">name</span> <span class="o">=</span> <span class="n">cweb</span><span class="p">.</span><span class="n">request</span><span class="p">.</span><span class="n">get_param</span><span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="s">"name"</span><span class="p">);</span>
    <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">name</span><span class="p">){</span>
        <span class="k">return</span> <span class="n">cweb</span><span class="p">.</span><span class="n">response</span><span class="p">.</span><span class="n">send_text</span><span class="p">(</span><span class="s">"name not provided</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span><span class="mi">404</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="kt">unsigned</span> <span class="kt">char</span> <span class="o">*</span><span class="n">content</span> <span class="o">=</span> <span class="n">cweb</span><span class="p">.</span><span class="n">request</span><span class="p">.</span><span class="n">read_content</span><span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="n">two_mega_bytes</span><span class="p">);</span>
    <span class="k">if</span><span class="p">(</span><span class="n">content</span><span class="p">){</span>
        <span class="n">write_binary_file</span><span class="p">(</span><span class="n">name</span><span class="p">,</span><span class="n">content</span><span class="p">,</span> <span class="n">request</span><span class="o">-&gt;</span><span class="n">content_length</span><span class="p">);</span>
        <span class="k">return</span> <span class="n">cweb_send_text</span><span class="p">(</span><span class="s">"File Written"</span><span class="p">,</span> <span class="mi">200</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">cweb_send_text</span><span class="p">(</span><span class="s">"No Content Provided"</span><span class="p">,</span> <span class="mi">200</span><span class="p">);</span>


<span class="p">}</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[]){</span>
    <span class="n">cweb</span> <span class="o">=</span> <span class="n">newCwebNamespace</span><span class="p">();</span>
    <span class="n">CwebServer</span> <span class="n">server</span> <span class="o">=</span> <span class="n">newCwebSever</span><span class="p">(</span><span class="mi">5000</span><span class="p">,</span> <span class="n">main_sever</span><span class="p">);</span>
    <span class="n">cweb</span><span class="p">.</span><span class="n">server</span><span class="p">.</span><span class="n">start</span><span class="p">(</span><span class="o">&amp;</span><span class="n">server</span><span class="p">);</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h1 id="returning-values">Returning Values</h1>
<h2 id="plain-text">Plain Text</h2>
<p>Returning plain text is simple with <strong>cweb_send_text</strong>:
<!--codeof:examples/returning_plain_text.c--></p>
<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include "CWebStudio.h"
</span><span class="n">CwebNamespace</span> <span class="n">cweb</span><span class="p">;</span>

<span class="n">CwebHttpResponse</span> <span class="o">*</span><span class="nf">main_sever</span><span class="p">(</span><span class="n">CwebHttpRequest</span> <span class="o">*</span><span class="n">request</span> <span class="p">){</span>


    <span class="k">return</span> <span class="n">cweb</span><span class="p">.</span><span class="n">response</span><span class="p">.</span><span class="n">send_text</span><span class="p">(</span><span class="s">"Exemple of Return"</span><span class="p">,</span> <span class="mi">200</span><span class="p">);</span>
    
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[]){</span>
    <span class="n">cweb</span> <span class="o">=</span> <span class="n">newCwebNamespace</span><span class="p">();</span>
    <span class="n">CwebServer</span> <span class="n">server</span> <span class="o">=</span> <span class="n">newCwebSever</span><span class="p">(</span><span class="mi">5000</span><span class="p">,</span> <span class="n">main_sever</span><span class="p">);</span>
    <span class="n">cweb</span><span class="p">.</span><span class="n">server</span><span class="p">.</span><span class="n">start</span><span class="p">(</span><span class="o">&amp;</span><span class="n">server</span><span class="p">);</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
<p><strong>cweb_send_text_cleaning_memory</strong> can handle strings:
<!--codeof:examples/returning_text_cleaning_memory.c--></p>
<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include "CWebStudio.h"
</span>
<span class="n">CwebNamespace</span> <span class="n">cweb</span><span class="p">;</span>

<span class="n">CwebHttpResponse</span> <span class="o">*</span><span class="nf">main_sever</span><span class="p">(</span><span class="n">CwebHttpRequest</span> <span class="o">*</span><span class="n">request</span> <span class="p">){</span>

    <span class="kt">char</span> <span class="o">*</span><span class="n">teste</span> <span class="o">=</span> <span class="n">malloc</span><span class="p">(</span><span class="mi">100</span><span class="p">);</span>
    <span class="n">strcpy</span><span class="p">(</span><span class="n">teste</span><span class="p">,</span> <span class="s">"Hello World"</span><span class="p">);</span>
    <span class="k">return</span> <span class="n">cweb</span><span class="p">.</span><span class="n">response</span><span class="p">.</span><span class="n">send_text_cleaning_memory</span><span class="p">(</span><span class="n">teste</span><span class="p">,</span><span class="mi">200</span><span class="p">);</span>
<span class="p">}</span>


<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[]){</span>
    <span class="n">cweb</span> <span class="o">=</span> <span class="n">newCwebNamespace</span><span class="p">();</span>
    <span class="n">CwebServer</span> <span class="n">server</span> <span class="o">=</span> <span class="n">newCwebSever</span><span class="p">(</span><span class="mi">5000</span><span class="p">,</span> <span class="n">main_sever</span><span class="p">);</span>
    <span class="n">cweb</span><span class="p">.</span><span class="n">server</span><span class="p">.</span><span class="n">start</span><span class="p">(</span><span class="o">&amp;</span><span class="n">server</span><span class="p">);</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="rendered-html">Rendered HTML</h2>
<p>To return rendered HTML, the function <strong>cweb_send_rendered_CTextStack_cleaning_memory</strong> may be used. Memory will be automatically cleaned:</p>

<p>see more at https://github.com/OUIsolutions/CTextEngine
<!--codeof:examples/rendering_html.c--></p>
<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include "CWebStudio.h"
</span>

<span class="n">CwebNamespace</span> <span class="n">cweb</span><span class="p">;</span>

<span class="n">CwebHttpResponse</span> <span class="o">*</span><span class="nf">main_sever</span><span class="p">(</span> <span class="n">CwebHttpRequest</span> <span class="o">*</span><span class="n">request</span> <span class="p">){</span>

    <span class="n">CTextStackModule</span> <span class="n">m</span> <span class="o">=</span> <span class="n">newCTextStackModule</span><span class="p">();</span>

    <span class="n">CTextStack</span> <span class="o">*</span><span class="n">s</span> <span class="o">=</span> <span class="n">m</span><span class="p">.</span><span class="n">newStack</span><span class="p">(</span><span class="n">CTEXT_LINE_BREAKER</span><span class="p">,</span> <span class="n">CTEXT_SEPARATOR</span><span class="p">);</span>

    <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">lang</span> <span class="o">=</span> <span class="s">"en"</span><span class="p">;</span>
    <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">text</span> <span class="o">=</span> <span class="s">"text exemple"</span><span class="p">;</span>
    <span class="n">CText</span><span class="err">$</span><span class="n">Scope</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">CTEXT_HTML</span><span class="p">,</span><span class="s">"lang=</span><span class="se">\"</span><span class="s">%s</span><span class="se">\"</span><span class="s">"</span><span class="p">,</span><span class="n">lang</span><span class="p">){</span>
        <span class="n">CTextScope</span><span class="p">(</span><span class="n">s</span><span class="p">,</span><span class="n">CTEXT_HEAD</span><span class="p">){}</span>
        <span class="n">CTextScope</span><span class="p">(</span><span class="n">s</span><span class="p">,</span><span class="n">CTEXT_BODY</span><span class="p">){</span>
            <span class="n">CTextScope</span><span class="p">(</span><span class="n">s</span><span class="p">,</span><span class="n">CTEXT_H1</span><span class="p">){</span>
                <span class="n">m</span><span class="p">.</span><span class="n">segment_text</span><span class="p">(</span><span class="n">s</span><span class="p">,</span><span class="s">"This is a text"</span><span class="p">);</span>
            <span class="p">}</span>
            <span class="n">CTextScope</span><span class="p">(</span><span class="n">s</span><span class="p">,</span><span class="n">CTEXT_P</span><span class="p">){</span>
                <span class="n">m</span><span class="p">.</span><span class="n">segment_format</span><span class="p">(</span><span class="n">s</span><span class="p">,</span><span class="s">"This is a formated  text  %s"</span><span class="p">,</span><span class="n">text</span><span class="p">);</span>

            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">cweb_send_rendered_CTextStack_cleaning_memory</span><span class="p">(</span><span class="n">s</span><span class="p">,</span><span class="mi">200</span><span class="p">);</span>
<span class="p">}</span>


<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[]){</span>
    <span class="n">cweb</span> <span class="o">=</span> <span class="n">newCwebNamespace</span><span class="p">();</span>
    <span class="n">CwebServer</span> <span class="n">server</span> <span class="o">=</span> <span class="n">newCwebSever</span><span class="p">(</span><span class="mi">5000</span><span class="p">,</span> <span class="n">main_sever</span><span class="p">);</span>
    <span class="n">cweb</span><span class="p">.</span><span class="n">server</span><span class="p">.</span><span class="n">start</span><span class="p">(</span><span class="o">&amp;</span><span class="n">server</span><span class="p">);</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="html">HTML</h2>
<p>To generate HTML from a file, the <strong>cweb_send_var_html</strong> function may be used:
<!--codeof:examples/returing_var_html.c--></p>
<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include "CWebStudio.h"
</span><span class="n">CwebNamespace</span> <span class="n">cweb</span><span class="p">;</span>

<span class="k">struct</span> <span class="n">CwebHttpResponse</span> <span class="o">*</span><span class="nf">main_sever</span><span class="p">(</span><span class="k">struct</span> <span class="n">CwebHttpRequest</span> <span class="o">*</span><span class="n">request</span> <span class="p">){</span>

    <span class="kt">char</span> <span class="o">*</span><span class="n">html</span> <span class="o">=</span> <span class="s">"&lt;html&gt;&lt;body&gt;&lt;h1&gt;Hello World&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;"</span><span class="p">;</span>
    <span class="k">return</span> <span class="n">cweb</span><span class="p">.</span><span class="n">response</span><span class="p">.</span><span class="n">send_var_html</span><span class="p">(</span><span class="n">html</span><span class="p">,</span><span class="mi">200</span><span class="p">);</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[]){</span>
    <span class="n">cweb</span> <span class="o">=</span> <span class="n">newCwebNamespace</span><span class="p">();</span>
    <span class="n">CwebServer</span> <span class="n">server</span> <span class="o">=</span> <span class="n">newCwebSever</span><span class="p">(</span><span class="mi">5000</span><span class="p">,</span> <span class="n">main_sever</span><span class="p">);</span>
    <span class="n">cweb</span><span class="p">.</span><span class="n">server</span><span class="p">.</span><span class="n">start</span><span class="p">(</span><span class="o">&amp;</span><span class="n">server</span><span class="p">);</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
<p>As is done with returning plain text, memory will be automatically cleaned with <strong>cweb_send_var_html_cleaning_memory</strong>: 
<!--codeof:examples/returning_var_html_cleaning_memory.c--></p>
<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include "CWebStudio.h"
</span><span class="n">CwebNamespace</span> <span class="n">cweb</span><span class="p">;</span>

<span class="k">struct</span> <span class="n">CwebHttpResponse</span> <span class="o">*</span><span class="nf">main_sever</span><span class="p">(</span><span class="k">struct</span> <span class="n">CwebHttpRequest</span> <span class="o">*</span><span class="n">request</span> <span class="p">){</span>

    <span class="kt">char</span> <span class="o">*</span><span class="n">html</span> <span class="o">=</span> <span class="n">malloc</span><span class="p">(</span><span class="mi">1000</span><span class="p">);</span>
    <span class="n">strcat</span><span class="p">(</span><span class="n">html</span><span class="p">,</span> <span class="s">"&lt;html&gt;&lt;body&gt;&lt;h1&gt;Hello World&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;"</span><span class="p">);</span>
    <span class="k">return</span> <span class="n">cweb</span><span class="p">.</span><span class="n">response</span><span class="p">.</span><span class="n">send_var_html_cleaning_memory</span><span class="p">(</span><span class="n">html</span><span class="p">,</span><span class="mi">200</span><span class="p">);</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[]){</span>
    <span class="n">cweb</span> <span class="o">=</span> <span class="n">newCwebNamespace</span><span class="p">();</span>
    <span class="n">CwebServer</span> <span class="n">server</span> <span class="o">=</span> <span class="n">newCwebSever</span><span class="p">(</span><span class="mi">5000</span><span class="p">,</span> <span class="n">main_sever</span><span class="p">);</span>
    <span class="n">cweb</span><span class="p">.</span><span class="n">server</span><span class="p">.</span><span class="n">start</span><span class="p">(</span><span class="o">&amp;</span><span class="n">server</span><span class="p">);</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
<h2 id="returning-files">Returning Files</h2>
<p>Files can be directly returned by referencing the path:
<!--codeof:examples/returning_files.c--></p>
<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include "CWebStudio.h"
</span>
<span class="n">CwebNamespace</span> <span class="n">cweb</span><span class="p">;</span>

<span class="n">CwebHttpResponse</span> <span class="o">*</span><span class="nf">main_sever</span><span class="p">(</span><span class="n">CwebHttpRequest</span> <span class="o">*</span><span class="n">request</span> <span class="p">){</span>

    <span class="k">return</span> <span class="n">cweb_send_file</span><span class="p">(</span>
            <span class="s">"my_image.png"</span><span class="p">,</span>
            <span class="n">CWEB_AUTO_SET_CONTENT</span><span class="p">,</span>
            <span class="mi">200</span>
    <span class="p">);</span>

<span class="p">}</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[]){</span>
    <span class="n">cweb</span> <span class="o">=</span> <span class="n">newCwebNamespace</span><span class="p">();</span>
    <span class="n">CwebServer</span> <span class="n">server</span> <span class="o">=</span> <span class="n">newCwebSever</span><span class="p">(</span><span class="mi">5000</span><span class="p">,</span> <span class="n">main_sever</span><span class="p">);</span>
    <span class="n">cweb</span><span class="p">.</span><span class="n">server</span><span class="p">.</span><span class="n">start</span><span class="p">(</span><span class="o">&amp;</span><span class="n">server</span><span class="p">);</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="returning-other-formats">Returning Other Formats</h2>
<p>Other formats may be returned like this: 
<!--codeof:examples/returning_any.c--></p>
<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include "CWebStudio.h"
</span><span class="n">CwebNamespace</span> <span class="n">cweb</span><span class="p">;</span>

<span class="k">struct</span> <span class="n">CwebHttpResponse</span> <span class="o">*</span><span class="nf">main_sever</span><span class="p">(</span><span class="k">struct</span> <span class="n">CwebHttpRequest</span> <span class="o">*</span><span class="n">request</span> <span class="p">){</span>

    <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">html</span> <span class="o">=</span> <span class="s">"&lt;html&gt;&lt;body&gt;&lt;h1&gt;Hello World&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;"</span><span class="p">;</span>
    <span class="k">return</span> <span class="n">cweb</span><span class="p">.</span><span class="n">response</span><span class="p">.</span><span class="n">send_any</span><span class="p">(</span><span class="s">"text/html"</span><span class="p">,</span><span class="n">strlen</span><span class="p">(</span><span class="n">html</span><span class="p">),(</span><span class="kt">unsigned</span> <span class="kt">char</span><span class="o">*</span><span class="p">)</span><span class="n">html</span><span class="p">,</span><span class="mi">200</span><span class="p">);</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[]){</span>
    <span class="n">cweb</span> <span class="o">=</span> <span class="n">newCwebNamespace</span><span class="p">();</span>
    <span class="n">CwebServer</span> <span class="n">server</span> <span class="o">=</span> <span class="n">newCwebSever</span><span class="p">(</span><span class="mi">5000</span><span class="p">,</span> <span class="n">main_sever</span><span class="p">);</span>
    <span class="n">cweb</span><span class="p">.</span><span class="n">server</span><span class="p">.</span><span class="n">start</span><span class="p">(</span><span class="o">&amp;</span><span class="n">server</span><span class="p">);</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="static-files">Static Files</h3>
<p>Static files (javascript/css/html) can be referenced and returned in the static directory:</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
    <span class="nt">&lt;img</span> <span class="na">src=</span><span class="s">"/static/captura2.png"</span><span class="nt">&gt;</span>
</code></pre></div></div>
<h3 id="especial-static-files">Especial Static Files</h3>

<h4 id="staticfaviconjpgpngico">static/favicon.(jpg|png|ico)</h4>
<p>if you put a  <strong>static/favico.jpg</strong> or   <strong>static/favico.png</strong> or   <strong>static/favico.ico</strong> 
into yur static folder, it will automatic became the favicon</p>
<h4 id="static404html">static/404.html</h4>
<p>if you put an <strong>static/400.html</strong> into your static file, it will be used when an 404 error happen</p>

<h4 id="static500html">static/500.html</h4>
<p>if you put an <strong>static/400.html</strong> into your static file, it will be used when an internal error happen</p>

<h4 id="custom-error-pages">Custom Error Pages</h4>
<p>To return a custom error page, place the <error_code>.html in the static directory. Creating a 500.html into the static directory, for example, will return this page when a 500 error occurs.</error_code></p>

<h4 id="smart-cache">Smart Cache</h4>
<p>Dynamic caching may be used inside HTML by using smart_cache:</p>
<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="nt">&lt;img</span> <span class="na">src=</span><span class="s">"smart-cache='file.png'"</span><span class="nt">&gt;</span>
</code></pre></div></div>

<h4 id="inline-inclusion">Inline inclusion</h4>
<p>Its also possible to generate inline inclusion with:</p>
<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="nt">&lt;div&gt;</span>
        inline-include='static/teste3.html'
    <span class="nt">&lt;/div&gt;</span>

</code></pre></div></div>

<h4 id="smart-cache-in-rendered-text">Smart Cache in Rendered Text</h4>
<p>Smart caching with rendered text can be done with <strong>private_cweb_smart_static_ref</strong>:
<!--codeof:examples/smart_cache_inside_rendered_text.c--></p>
<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include "CWebStudio.h"
</span><span class="n">CwebNamespace</span> <span class="n">cweb</span><span class="p">;</span>

<span class="n">CwebHttpResponse</span> <span class="o">*</span><span class="nf">main_sever</span><span class="p">(</span><span class="n">CwebHttpRequest</span> <span class="o">*</span><span class="n">request</span> <span class="p">){</span>

    <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">lang</span> <span class="o">=</span> <span class="s">"en"</span><span class="p">;</span>
    <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">text</span> <span class="o">=</span> <span class="s">"text exemple"</span><span class="p">;</span>
    <span class="n">CTextStackModule</span>  <span class="n">m</span> <span class="o">=</span> <span class="n">newCTextStackModule</span><span class="p">();</span>
    <span class="k">struct</span> <span class="n">CTextStack</span> <span class="o">*</span><span class="n">s</span> <span class="o">=</span> <span class="n">newCTextStack</span><span class="p">(</span><span class="n">CTEXT_LINE_BREAKER</span><span class="p">,</span> <span class="n">CTEXT_SEPARATOR</span><span class="p">);</span>

    <span class="n">m</span><span class="p">.</span><span class="err">$</span><span class="n">open</span><span class="p">(</span><span class="n">s</span><span class="p">,</span><span class="n">CTEXT_HTML</span><span class="p">,</span><span class="s">"lang=</span><span class="se">\"</span><span class="s">%s</span><span class="se">\"</span><span class="s">"</span><span class="p">,</span><span class="n">lang</span><span class="p">);</span>
        <span class="n">m</span><span class="p">.</span><span class="n">open</span><span class="p">(</span><span class="n">s</span><span class="p">,</span><span class="n">CTEXT_HEAD</span><span class="p">);</span>
            
            <span class="kt">char</span> <span class="o">*</span><span class="n">fav_icon_link</span> <span class="o">=</span> <span class="n">cweb_smart_static_ref</span><span class="p">(</span><span class="s">"favicon.ico"</span><span class="p">);</span>
            <span class="n">m</span><span class="p">.</span><span class="k">auto</span><span class="err">$</span><span class="n">close</span><span class="p">(</span><span class="n">s</span><span class="p">,</span><span class="n">CTEXT_LINK</span><span class="p">,</span><span class="s">"rel=</span><span class="se">\"</span><span class="s">shortcut icon</span><span class="se">\"</span><span class="s"> href=</span><span class="se">\"</span><span class="s">%s</span><span class="se">\"</span><span class="s">"</span><span class="p">,</span><span class="n">fav_icon_link</span><span class="p">);</span>
            <span class="n">free</span><span class="p">(</span><span class="n">fav_icon_link</span><span class="p">);</span>

        <span class="n">m</span><span class="p">.</span><span class="n">close</span><span class="p">(</span><span class="n">s</span><span class="p">,</span><span class="n">CTEXT_HEAD</span><span class="p">);</span>
        <span class="n">m</span><span class="p">.</span><span class="n">open</span><span class="p">(</span><span class="n">s</span><span class="p">,</span><span class="n">CTEXT_BODY</span><span class="p">);</span>
            
            <span class="kt">char</span> <span class="o">*</span><span class="n">img_link</span> <span class="o">=</span> <span class="n">cweb_smart_static_ref</span><span class="p">(</span><span class="s">"my_image.png"</span><span class="p">);</span>
            <span class="n">m</span><span class="p">.</span><span class="k">auto</span><span class="err">$</span><span class="n">close</span><span class="p">(</span><span class="n">s</span><span class="p">,</span><span class="n">CTEXT_IMG</span><span class="p">,</span><span class="s">"src=</span><span class="se">\"</span><span class="s">%s</span><span class="se">\"</span><span class="s"> width=</span><span class="se">\"</span><span class="s">200px</span><span class="se">\"</span><span class="s">"</span><span class="p">,</span><span class="n">img_link</span><span class="p">);</span>
            <span class="n">free</span><span class="p">(</span><span class="n">img_link</span><span class="p">);</span>

        <span class="n">m</span><span class="p">.</span><span class="n">close</span><span class="p">(</span><span class="n">s</span><span class="p">,</span><span class="n">CTEXT_BODY</span><span class="p">);</span>
    <span class="n">m</span><span class="p">.</span><span class="n">close</span><span class="p">(</span><span class="n">s</span><span class="p">,</span><span class="n">CTEXT_HTML</span><span class="p">);</span>
    <span class="k">return</span> <span class="n">cweb_send_rendered_CTextStack_cleaning_memory</span><span class="p">(</span><span class="n">s</span><span class="p">,</span><span class="mi">200</span><span class="p">);</span>
    
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[]){</span>
    <span class="n">cweb</span> <span class="o">=</span> <span class="n">newCwebNamespace</span><span class="p">();</span>
    <span class="n">CwebServer</span> <span class="n">server</span> <span class="o">=</span> <span class="n">newCwebSever</span><span class="p">(</span><span class="mi">5000</span><span class="p">,</span> <span class="n">main_sever</span><span class="p">);</span>
    <span class="n">cweb</span><span class="p">.</span><span class="n">server</span><span class="p">.</span><span class="n">start</span><span class="p">(</span><span class="o">&amp;</span><span class="n">server</span><span class="p">);</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="cweb_debug-flag">CWEB_DEBUG FLAG</h2>
<p><strong>CWEB_DEBUG</strong> will provide useful debugging information:
<!--codeof:examples/cweb_debug.c--></p>
<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="cp">#define CWEB_DEBUG
#include "CWebStudio.h"
</span><span class="n">CwebNamespace</span> <span class="n">cweb</span><span class="p">;</span>
<span class="n">CwebHttpResponse</span> <span class="o">*</span><span class="nf">main_sever</span><span class="p">(</span><span class="n">CwebHttpRequest</span> <span class="o">*</span><span class="n">request</span> <span class="p">){</span>

    <span class="k">return</span> <span class="n">cweb</span><span class="p">.</span><span class="n">response</span><span class="p">.</span><span class="n">send_text</span><span class="p">(</span><span class="s">"Hello World"</span><span class="p">,</span> <span class="mi">200</span><span class="p">);</span>
    
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[]){</span>
    <span class="n">cweb</span> <span class="o">=</span> <span class="n">newCwebNamespace</span><span class="p">();</span>
    <span class="n">CwebServer</span> <span class="n">server</span> <span class="o">=</span> <span class="n">newCwebSever</span><span class="p">(</span><span class="mi">5000</span><span class="p">,</span> <span class="n">main_sever</span><span class="p">);</span>
    <span class="n">cweb</span><span class="p">.</span><span class="n">server</span><span class="p">.</span><span class="n">start</span><span class="p">(</span><span class="o">&amp;</span><span class="n">server</span><span class="p">);</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h1 id="killing-the-server">KIlling the server</h1>

<p>if you want to kill the server for any reason, like testing memory leaks or finish the server
you can just change the var <strong>cweb_end_server</strong> to true
<!--codeof:examples/kill.c--></p>
<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include "CWebStudio.h"
</span>
<span class="n">CwebNamespace</span> <span class="n">cweb</span><span class="p">;</span>

<span class="n">CwebHttpResponse</span> <span class="o">*</span><span class="nf">main_sever</span><span class="p">(</span><span class="n">CwebHttpRequest</span> <span class="o">*</span><span class="n">request</span> <span class="p">){</span>

    <span class="k">if</span><span class="p">(</span><span class="n">strcmp</span><span class="p">(</span><span class="n">request</span><span class="o">-&gt;</span><span class="n">route</span><span class="p">,</span><span class="s">"/kill"</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">){</span>
        <span class="n">cweb_end_server</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">cweb</span><span class="p">.</span><span class="n">response</span><span class="p">.</span><span class="n">send_text</span><span class="p">(</span><span class="s">"Working"</span><span class="p">,</span> <span class="mi">200</span><span class="p">);</span>

<span class="p">}</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[]){</span>
    <span class="n">cweb</span> <span class="o">=</span> <span class="n">newCwebNamespace</span><span class="p">();</span>
    <span class="n">CwebServer</span> <span class="n">server</span> <span class="o">=</span> <span class="n">newCwebSever</span><span class="p">(</span><span class="mi">5000</span><span class="p">,</span> <span class="n">main_sever</span><span class="p">);</span>
    <span class="n">server</span><span class="p">.</span><span class="n">single_process</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
    <span class="n">cweb</span><span class="p">.</span><span class="n">server</span><span class="p">.</span><span class="n">start</span><span class="p">(</span><span class="o">&amp;</span><span class="n">server</span><span class="p">);</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h1 id="configuring-the-server">Configuring The Server</h1>
<p>Several server configuration parameters may be set:
<!--codeof:examples/server_paramns.c--></p>
<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="cp">#include "CWebStudio.h"
</span><span class="n">CwebNamespace</span> <span class="n">cweb</span><span class="p">;</span>

<span class="k">struct</span> <span class="n">CwebHttpResponse</span> <span class="o">*</span><span class="nf">main_sever</span><span class="p">(</span><span class="k">struct</span> <span class="n">CwebHttpRequest</span> <span class="o">*</span><span class="n">request</span> <span class="p">){</span>

    <span class="k">return</span> <span class="n">cweb</span><span class="p">.</span><span class="n">response</span><span class="p">.</span><span class="n">send_text</span><span class="p">(</span><span class="s">"Hello World"</span><span class="p">,</span> <span class="mi">200</span><span class="p">);</span>

<span class="p">}</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">(){</span>
    <span class="n">cweb</span> <span class="o">=</span> <span class="n">newCwebNamespace</span><span class="p">();</span>

    <span class="n">CwebServer</span> <span class="n">server</span> <span class="o">=</span> <span class="n">newCwebSever</span><span class="p">(</span><span class="mi">5000</span><span class="p">,</span> <span class="n">main_sever</span><span class="p">);</span>
    <span class="c1">//the higher time of the request handler</span>
    <span class="c1">//after that , the sever will return 500</span>
    <span class="c1">// these is useful to prevent the server infinite loop</span>
    <span class="n">server</span><span class="p">.</span><span class="n">function_timeout</span> <span class="o">=</span> <span class="mi">30</span><span class="p">;</span>
    <span class="c1">//the higher time of the client</span>
    <span class="c1">//after that , the sever will return 408</span>
    <span class="c1">//these is useful to prevent invalid requests</span>
    <span class="n">server</span><span class="p">.</span><span class="n">client_timeout</span> <span class="o">=</span> <span class="mi">5</span><span class="p">;</span>

    <span class="c1">//these atributes define to allow cros origins domains</span>
    <span class="n">server</span><span class="p">.</span><span class="n">allow_cors</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>

    <span class="c1">//the max queue of the server</span>
    <span class="n">server</span><span class="p">.</span><span class="n">max_queue</span> <span class="o">=</span> <span class="mi">100</span><span class="p">;</span>
    <span class="c1">//if true , the server will run in single process</span>
    <span class="n">server</span><span class="p">.</span><span class="n">single_process</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
    <span class="c1">//the max simultaneous requests</span>
    <span class="n">server</span><span class="p">.</span><span class="n">max_requests</span> <span class="o">=</span> <span class="mi">1000</span><span class="p">;</span>
    <span class="c1">//if true , the server will use the static files located into the folder "static"</span>
    <span class="n">server</span><span class="p">.</span><span class="n">use_static</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>

    <span class="c1">//define where to loock for static content</span>
    <span class="n">server</span><span class="p">.</span><span class="n">static_folder</span> <span class="o">=</span> <span class="s">"static"</span><span class="p">;</span>

    <span class="n">cweb</span><span class="p">.</span><span class="n">server</span><span class="p">.</span><span class="n">start</span><span class="p">(</span><span class="o">&amp;</span><span class="n">server</span><span class="p">);</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h1 id="used-dependencies-and-atributions">Used Dependencies And Atributions</h1>
<p>DoTheWorld includes all self dependecies in the single file. If one of these libraries is used in your code, be mindful of circular imports.</p>

<h2 id="cjson">CJson<br /><br /></h2>
<p><strong>CJson</strong>: from https://github.com/DaveGamble/cJSON <br />
Copyright (c) 2009-2017 Dave Gamble and cJSON contributors</p>

<p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the “Software”), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p>

<p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p>

<p>THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>

<h2 id="sha-256-">sha-256 <br /></h2>
<p><strong>sha-256</strong>: from https://github.com/amosnier/sha-2 <br /></p>

<p>Zero Clause BSD License
© 2021 Alain Mosnier</p>

<p>Permission to use, copy, modify, and/or distribute this software for any purpose with or without fee is hereby granted.</p>

<p>THE SOFTWARE IS PROVIDED “AS IS” AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.</p>

<h2 id="ctextengine">CTextEngine</h2>
<p><strong>CtextEngine</strong>: from https://github.com/OUIsolutions/CTextEngine <br /></p>

<p>MIT License</p>

<p>Copyright (c) 2023 OUI</p>

<p>Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the “Software”), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:</p>

<p>The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.</p>

<p>THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.</p>


      
      <div class="footer border-top border-gray-light mt-5 pt-3 text-right text-gray">
        This site is open source. <a href="https://github.com/OUIsolutions/CWebStudio/edit/main/README.md">Improve this page</a>.
      </div>
      
    </div>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/anchor-js/4.1.0/anchor.min.js" integrity="sha256-lZaRhKri35AyJSypXXs4o6OPFTbTmUoltBbDCbdzegg=" crossorigin="anonymous"></script>
    <script>anchors.add();</script>
  </body>
</html>
